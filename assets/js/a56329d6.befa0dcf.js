"use strict";(self.webpackChunkgemunion_github_io=self.webpackChunkgemunion_github_io||[]).push([[4123],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2205:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={sidebar_position:1},s="Installation",p={unversionedId:"installation",id:"installation",title:"Installation",description:"Welcome to GEMUNION framework monorepo",source:"@site/api/installation.md",sourceDirName:".",slug:"/installation",permalink:"/api/installation",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",next:{title:"System components",permalink:"/api/category/system-components"}},u={},c=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation-1",level:2},{value:"Pre Install",id:"pre-install",level:2},{value:"Manual Installation",id:"manual-installation",level:2},{value:"API docs",id:"api-docs",level:2},{value:"Configuration",id:"configuration",level:2}],m={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"installation"},"Installation"),(0,i.kt)("p",null,"Welcome to ",(0,i.kt)("a",{parentName:"p",href:"https://www.gemunion.io/"},"GEMUNION")," framework monorepo"),(0,i.kt)("p",null,"This monorepo is powered by Lerna. You can read about what is monorepo and how erna works ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/lerna/lerna"},"here")," "),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Project consists of 4 main sections"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"CONTRACTS is a home of all solidity smart contracts"),(0,i.kt)("li",{parentName:"ul"},"PACKAGES contains FE localization and shared types"),(0,i.kt)("li",{parentName:"ul"},"SERVICES contains FE and BE code"),(0,i.kt)("li",{parentName:"ul"},"MICROSERVICES a bunch of utils for integration with other services")),(0,i.kt)("h2",{id:"installation-1"},"Installation"),(0,i.kt)("p",null,"There are a number of external services we need for data storage and communication between different parts of the system, to install and run them execute"),(0,i.kt)("h2",{id:"pre-install"},"Pre Install"),(0,i.kt)("p",null,"I assume you have NodeJS NPM/YARN, Postgres, RabbitMQ and Redis installed\nor, you just can use them in docker :)"),(0,i.kt)("p",null,"In case you have installed postgres, you must manually create an ",(0,i.kt)("inlineCode",{parentName:"p"},"undeads-development")," database,\nour script only creates a schema for you."),(0,i.kt)("p",null,"In order to run tests, you must manually create ",(0,i.kt)("inlineCode",{parentName:"p"},"undeads-test")," database."),(0,i.kt)("p",null,"In any case you have to fill up sensitive keys in docker files or .env files"),(0,i.kt)("h2",{id:"manual-installation"},"Manual Installation"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"First, install dependencies and build project:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i\nnpm run bootstrap\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Then, you can run Project's services one-by-one, run them in separate terminals for easy monitoring")),(0,i.kt)("p",null,"Admin-api (it will run init postgres migrations as well)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"npm run --prefix ./services/admin-api start\n")),(0,i.kt)("p",null,"Admin-ui"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"npm run --prefix ./services/admin-ui start\n")),(0,i.kt)("p",null,"Market-api"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"npm run --prefix ./services/market-api start\n")),(0,i.kt)("p",null,"Market-ui"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"npm run --prefix ./services/market-ui start\n")),(0,i.kt)("p",null,"Core-eth"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"npm run --prefix ./services/core-eth start\n")),(0,i.kt)("p",null,"Json-api"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"npm run --prefix ./microservices/json start\n")),(0,i.kt)("p",null,"Game"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"npm run --prefix ./microservices/game start\n")),(0,i.kt)("p",null,"Emailer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"npm run --prefix ./microservices/eml start\n")),(0,i.kt)("h2",{id:"api-docs"},"API docs"),(0,i.kt)("p",null,"There are Swagger API documentation configured at appropriate service ports, ie\nAdmin-api: http://localhost:3001/swagger\nMarket-api: http://localhost:3005/swagger\nCore-eth: http://localhost:3021/swagger"),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"For fine tune check services READMEs"))}d.isMDXComponent=!0}}]);